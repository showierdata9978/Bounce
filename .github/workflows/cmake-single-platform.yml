# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3   
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64

    - name: Put MSYS2_MinGW64 on PATH
      run: echo "D:/a/_temp/msys64/mingw64/bin" >> $GITHUB_PATH
    - name: Install Raylib
      run: |
          git clone https://github.com/raysan5/raylib.git raylib

          cd raylib/
          mkdir build && cd build
          cmake -DBUILD_SHARED_LIBS=ON ..
          make
          sudo make install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
   
    - name: Build
      # Build your program with the given configuration
      run: | 
        cmake -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/g++ -S . -B ./build -G "Unix Makefiles"      
        cd build
        make

    - name: capture build artifacts
      uses: actions/upload-artifact@v3
      with:
          name: Artifacts
          path: build/bounce/
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Raylib
      run: |
          sudo apt install libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev mingw-w64
          git clone https://github.com/raysan5/raylib.git raylib

          cd raylib/
          mkdir build && cd build
          cmake -DBUILD_SHARED_LIBS=ON .. -G "MinGW Makefiles"
          make
          sudo make install
          

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "MinGW Makefiles" 
   
    - name: Build
      # Build your program with the given configuration
      run: | 
        cmake -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/g++ -S . -B ./build -G "MinGW Makefiles"     
        cd build
        make

    - name: capture build artifacts
      uses: actions/upload-artifact@v3
      with:
          name: Artifacts
          path: build/bounce/

